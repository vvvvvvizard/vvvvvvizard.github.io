import pandas as pd
from flask import Flask, render_template_string

# Define the data
data = [
    ["Havanese", "Patellar Luxation", "20-30%", "Genetic predisposition", 5],
    ["Havanese", "Hip Dysplasia", "1-2%", "Genetic malformation", 4],
    ["Havanese", "Eye Disorders (Cataracts, PRA)", "5-10%", "Genetic", 4],
    ["Havanese", "Heart Murmurs", "3-5%", "Age-related changes", 3],
    ["Havanese", "Deafness", "2-4%", "Congenital/genetic", 3],
    ["Havanese", "Chondrodysplasia", "1-2%", "Genetic dwarfism", 5],
    
    ["Miniature Poodle", "Progressive Retinal Atrophy (PRA)", "5-8%", "Inherited retinal degeneration", 6],
    ["Miniature Poodle", "Epilepsy", "4-6%", "Idiopathic/genetic", 4],
    ["Miniature Poodle", "Addison's Disease", "3-5%", "Autoimmune disorder", 4],
    ["Miniature Poodle", "Hip Dysplasia", "3-5%", "Genetic malformation", 3],
    
    ["Papillon", "Patellar Luxation", "20-30%", "Genetic predisposition", 5],
    ["Papillon", "Dental Issues", "60-70%", "Poor dental hygiene/genetics", 6],
    ["Papillon", "Collapsed Trachea", "5-10%", "Weak cartilage rings", 4],
    ["Papillon", "Progressive Retinal Atrophy (PRA)", "1-3%", "Genetic", 3],
    
    ["Miniature Pinscher", "Legg-CalvÃ©-Perthes Disease", "5-10%", "Genetic blood flow issue to hip joint", 6],
    ["Miniature Pinscher", "Patellar Luxation", "10-15%", "Genetic predisposition", 5],
    ["Miniature Pinscher", "Progressive Retinal Atrophy (PRA)", "5-8%", "Genetic", 4],
    ["Miniature Pinscher", "Hypothyroidism", "1-2%", "Autoimmune", 3],
    
    ["Italian Greyhound", "Leg Fractures", "10-15%", "Fragile bones/thin structure", 6],
    ["Italian Greyhound", "Epilepsy", "3-5%", "Genetic/idiopathic", 4],
    ["Italian Greyhound", "Hypothyroidism", "2-4%", "Autoimmune", 4],
    ["Italian Greyhound", "Progressive Retinal Atrophy (PRA)", "4-6%", "Genetic", 3],
    
    ["Basenji", "Fanconi Syndrome", "5-8%", "Inherited metabolic disorder", 7],
    ["Basenji", "Progressive Retinal Atrophy (PRA)", "4-6%", "Genetic", 4],
    ["Basenji", "Hip Dysplasia", "3-5%", "Genetic malformation", 3],
    ["Basenji", "Hypothyroidism", "2-4%", "Autoimmune", 3]
]

# Convert to DataFrame
df = pd.DataFrame(data, columns=["Breed", "Condition", "Prevalence", "Cause", "Severity"])

# Define risk level colors
def color_severity(val):
    if val >= 7:
        return 'background-color: #ffcdd2'  # Red (high risk)
    elif val >= 5:
        return 'background-color: #fff9c4'  # Amber (moderate risk)
    else:
        return 'background-color: #c8e6c9'  # Green (low risk)

# Apply color formatting
styled_df = df.style.applymap(color_severity, subset=["Severity"])

# Flask application for web display
app = Flask(__name__)

html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dog Breed Health Overview</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f2f2f2;
        }
        .low-risk { background-color: #c8e6c9; }  /* Green */
        .moderate-risk { background-color: #fff9c4; }  /* Amber */
        .high-risk { background-color: #ffcdd2; }  /* Red */
    </style>
</head>
<body>
    <h1>Dog Breed Health Overview</h1>
    <table>
        <tr>
            <th>Breed</th>
            <th>Condition</th>
            <th>Prevalence</th>
            <th>Cause</th>
            <th>Severity (1-10)</th>
        </tr>
        {% for row in table %}
        <tr>
            <td>{{ row[0] }}</td>
            <td>{{ row[1] }}</td>
            <td>{{ row[2] }}</td>
            <td>{{ row[3] }}</td>
            <td class="{{ 'high-risk' if row[4] >= 7 else 'moderate-risk' if row[4] >= 5 else 'low-risk' }}">{{ row[4] }}/10</td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>
"""

@app.route("/")
def display_table():
    return render_template_string(html_template, table=data)

if __name__ == "__main__":
    app.run(debug=True)
